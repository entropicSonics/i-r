import {
  useLexicalComposerContext
} from "./chunk-TSURQBAX.js";
import {
  require_react
} from "./chunk-2VROJHEF.js";
import {
  __export,
  __toESM
} from "./chunk-HL2QZUHZ.js";

// node_modules/.pnpm/@lexical+react@0.14.2_lexical@0.14.2_react-dom@18.2.0_react@18.2.0_yjs@13.6.14/node_modules/@lexical/react/LexicalOnChangePlugin.dev.esm.js
var LexicalOnChangePlugin_dev_esm_exports = {};
__export(LexicalOnChangePlugin_dev_esm_exports, {
  OnChangePlugin: () => OnChangePlugin
});
var import_react = __toESM(require_react());
var CAN_USE_DOM = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
var useLayoutEffectImpl = CAN_USE_DOM ? import_react.useLayoutEffect : import_react.useEffect;
var useLayoutEffect = useLayoutEffectImpl;
function OnChangePlugin({
  ignoreHistoryMergeTagChange = true,
  ignoreSelectionChange = false,
  onChange
}) {
  const [editor] = useLexicalComposerContext();
  useLayoutEffect(() => {
    if (onChange) {
      return editor.registerUpdateListener(({
        editorState,
        dirtyElements,
        dirtyLeaves,
        prevEditorState,
        tags
      }) => {
        if (ignoreSelectionChange && dirtyElements.size === 0 && dirtyLeaves.size === 0 || ignoreHistoryMergeTagChange && tags.has("history-merge") || prevEditorState.isEmpty()) {
          return;
        }
        onChange(editorState, editor, tags);
      });
    }
  }, [editor, ignoreHistoryMergeTagChange, ignoreSelectionChange, onChange]);
  return null;
}

// node_modules/.pnpm/@lexical+react@0.14.2_lexical@0.14.2_react-dom@18.2.0_react@18.2.0_yjs@13.6.14/node_modules/@lexical/react/LexicalOnChangePlugin.prod.esm.js
var import_react2 = __toESM(require_react());
var o = "undefined" != typeof window && void 0 !== window.document && void 0 !== window.document.createElement ? import_react2.useLayoutEffect : import_react2.useEffect;

// node_modules/.pnpm/@lexical+react@0.14.2_lexical@0.14.2_react-dom@18.2.0_react@18.2.0_yjs@13.6.14/node_modules/@lexical/react/LexicalOnChangePlugin.esm.js
var mod = true ? LexicalOnChangePlugin_dev_esm_exports : LexicalOnChangePlugin_prod_esm_exports;
var OnChangePlugin2 = mod.OnChangePlugin;
export {
  OnChangePlugin2 as OnChangePlugin
};
//# sourceMappingURL=@lexical_react_LexicalOnChangePlugin.js.map
